__BASE__: [
  '../coco.yaml',
  './hyp.scratch.yaml',
]

weight: './yolov4_backbone.ckpt'

per_batch_size: 16 # 16 * 8 = 128
img_size: 608

network:
  model_name: yolov4
  depth_multiple: 1.0  # model depth multiple
  width_multiple: 1.0  # layer channel multiple
  stride: [32, 16, 8]
  anchors: [[142, 110],
            [192, 243],
            [459, 401],
            [36, 75],
            [76, 55],
            [72, 146],
            [12, 16],
            [19, 36],
            [40, 28]]

  # cspdarknet53 backbone
  backbone:
    # [from, number, module, args]
    [[-1, 1, ConvNormAct, [32, 3, 1, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [64, 3, 2, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [-1, 1, Bottleneck, [64, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [[-2, -1], 1, Concat, [1] ],
     [-1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [128, 3, 2, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [-1, 2, Residualblock, [64, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [8, 1, ConvNormAct, [64, 1, 1, act=nn.Mish()]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 1, ConvNormAct, [128, 1, 1, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [256, 3, 2, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [128, 1, 1, act=nn.Mish()]],
     [-1, 8, Residualblock, [128, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [128, 1, 1, act=nn.Mish()]],
     [15, 1, ConvNormAct, [128, 1, 1, act=nn.Mish()]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [512, 3, 2, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.Mish()]],
     [-1, 8, Residualblock, [256, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.Mish()]],
     [22, 1, ConvNormAct, [256, 1, 1, act=nn.Mish()]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [1024, 3, 2, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.Mish()]],
     [-1, 4, Residualblock, [512, act=nn.Mish()]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.Mish()]],
     [29, 1, ConvNormAct, [512, 1, 1, act=nn.Mish()]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 1, ConvNormAct, [1024, 1, 1, act=nn.Mish()]]
    ]

  # YOLOv4 head
  head:
    [[-1, 1, Bottleneck, [1024, False, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, nn.MaxPool2d, [5, 1, 'same']],
     [-2, 1, nn.MaxPool2d, [9, 1, 'same']],
     [-3, 1, nn.MaxPool2d, [13, 1, 'same']],
     [[-1, -2, -3, -4], 1, Concat, [1]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [1024, 3, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [512, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, Upsample, [None, 2, 'nearest']],
     [28, 1, ConvNormAct, [256, 1, 1, act=nn.LeakyReLU(0.1)]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 2, Bottleneck, [512, False, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [128, 3, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, Upsample, [None, 2, 'nearest']],
     [21, 1, ConvNormAct, [128, 1, 1, act=nn.LeakyReLU(0.1)]],
     [[-2, -1], 1, Concat, [1]],
     [-1, 2, Bottleneck, [256, False, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [128, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [256, 3, 1, act=nn.LeakyReLU(0.1)]],
     [-2, 1, ConvNormAct, [256, 3, 2, act=nn.LeakyReLU(0.1)]],
     [[-1, -9], 1, Concat, [1]],
     [-1, 2, Bottleneck, [512, False, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [256, 1, 1, act=nn.LeakyReLU(0.1)]],
     [-1, 1, ConvNormAct, [512, 3, 1, act=nn.LeakyReLU(0.1)]],
     [-2, 1, ConvNormAct, [512, 3, 2, act=nn.LeakyReLU(0.1)]],
     [[-1, -20], 1, Concat, [1]],
     [-1, 3, Bottleneck, [1024, False, act=nn.LeakyReLU(0.1)]],
     [[-1, -4, -9], 1, YOLOv4Head, [nc, anchors]],   # Detect(P3, P4, P5)
    ]
